const express = require("express");
const app = express();
const bodyParser = require("body-parser");
const exhbs = require("express-handlebars");
const dbo = require("./db");
const { ObjectId } = require("mongodb"); // Import ObjectId to handle MongoDB IDs

// Configure Handlebars view engine
app.engine(
  "hbs",
  exhbs.engine({ layoutsDir: "views/", defaultLayout: "main", extname: "hbs" })
);
app.set("view engine", "hbs");
app.set("views", "views");
app.use(bodyParser.urlencoded({ extended: true }));

// Route to display all books and handle CRUD operations
app.get("/", async (req, res) => {
  try {
    // Connect to the database
    let database = await dbo.getDatabase();
    const collection = database.collection("books");
    
    // Fetch all books from the collection
    const cursor = collection.find({});
    let books = await cursor.toArray();

    // Initialize edit variables
    let edit_id, edit_book;
    if (req.query.edit_id) {
      edit_id = req.query.edit_id;
      edit_book = await collection.findOne({ _id: new ObjectId(edit_id) });
    }

    // Handle delete operation
    if (req.query.delete_id) {
      await collection.deleteOne({ _id: new ObjectId(req.query.delete_id) });
      return res.redirect("/?status=3");
    }

    // Set status messages for different operations
    let message = "";
    switch (req.query.status) {
      case "1":
        message = "Inserted Successfully";
        break;
      case "2":
        message = "Updated Successfully";
        break;
      case "3":
        message = "Deleted Successfully";
        break;
      default:
        break;
    }

    // Render the main view with the necessary data
    res.render("main", { message, books, edit_id, edit_book });
  } catch (error) {
    console.error("Failed to fetch data from the database:", error);
    res.status(500).send("Internal Server Error");
  }
});

// Route to handle book creation
app.post("/store_book", async (req, res) => {
  try {
    let database = await dbo.getDatabase();
    const collection = database.collection("books");
    let book = { title: req.body.title, author: req.body.author };
    await collection.insertOne(book);
    return res.redirect("/?status=1");
  } catch (error) {
    console.error("Failed to store book:", error);
    res.status(500).send("Internal Server Error");
  }
});

// Route to handle book updates
app.post("/update_book/:edit_id", async (req, res) => {
  try {
    let database = await dbo.getDatabase();
    const collection = database.collection("books");
    let book = { title: req.body.title, author: req.body.author };
    await collection.updateOne(
      { _id: new ObjectId(req.params.edit_id) },
      { $set: book }
    );
    return res.redirect("/?status=2");
  } catch (error) {
    console.error("Failed to update book:", error.message);
    res.status(500).send("Internal Server Error");
  }
});

// Start the server
app.listen(8000, () => {
  console.log("Listening on port 8000");
});
